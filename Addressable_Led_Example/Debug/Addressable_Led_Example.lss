
Addressable_Led_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002b4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068f  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000282  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c0  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  9e:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UARTPutChar>:


// the following function sends a single character out of the serial port
static int UARTPutChar(char ch, FILE *stream) {

    while ( (UCSR0A & (1 << UDRE0)) == 0 )		// wait until there is room in the transmit buffer
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <UARTPutChar+0x4>
	{
	}

    UDR0 = ch;									// load the character into the UART data register
  b0:	80 93 c6 00 	sts	0x00C6, r24

    return 0;
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <UARTGetChar>:

// the following function waits for a serial character to be received
static int UARTGetChar(FILE *stream) {
   unsigned char ch;   							// create a variable to hold the received value
   
   while ( (UCSR0A & (1<<RXC0)) == 0 )			// wait until the received character flag is set
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <UARTGetChar+0x4>
   {
   }
   
   ch=UDR0;  									// load the received character into the local variable
  c4:	80 91 c6 00 	lds	r24, 0x00C6

   return ch;									// return the value
}
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <UARTinit>:
static FILE mystdout = FDEV_SETUP_STREAM(UARTPutChar, UARTGetChar, _FDEV_SETUP_RW);	/* Assign I/O stream to UART */


void UARTinit(void) {

	UCSR0A = 0x00;			
  cc:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x18;			// enable UART TX and RX
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;			// set the UART for N, 8, 1
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 8;				// set BAUD Rate for 115200 with 16MHz clock
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
  e2:	10 92 c5 00 	sts	0x00C5, r1

	stdout = &mystdout;		// define the output stream
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	90 93 13 01 	sts	0x0113, r25
  ee:	80 93 12 01 	sts	0x0112, r24
	stdin = &mystdout;		// define the input stream	
  f2:	90 93 11 01 	sts	0x0111, r25
  f6:	80 93 10 01 	sts	0x0110, r24
  fa:	08 95       	ret

000000fc <SPIinit>:
#define SPI_START();	CSPORT &= ~(1<<CS);
#define SPI_END();		CSPORT |= (1<<CS);


void SPIinit() {
	SPIDDR |= (1<<MOSI) | (1<<SCK);				//sets MOSI and SCK pins as outputs
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	88 62       	ori	r24, 0x28	; 40
 100:	84 b9       	out	0x04, r24	; 4
	SPIDDR &= ~(1<<MISO);						//sets MISO to input
 102:	24 98       	cbi	0x04, 4	; 4
	SPIPORT |= ((1<<SCK) | (1<<MOSI));			//enables pullups on SCK and MOSI pins
 104:	85 b1       	in	r24, 0x05	; 5
 106:	88 62       	ori	r24, 0x28	; 40
 108:	85 b9       	out	0x05, r24	; 5
	SPIPORT &= ~(1<<MISO);						//disables pullup resistors on MISO
 10a:	2c 98       	cbi	0x05, 4	; 5
	CSDDR |= (1<<CS);							//sets CS pin to output
 10c:	22 9a       	sbi	0x04, 2	; 4
	CSPORT |= (1<<CS);							//enables pullups on CS pin
 10e:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1);	//set SPCR regiseter to enable spi, master, prescalar = clk/16
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	8c bd       	out	0x2c, r24	; 44
 114:	08 95       	ret

00000116 <SPIxchng>:

uint8_t SPIxchng(uint8_t send_data) {
	uint8_t return_data = 0;

	//load data into register
	SPDR = send_data;
 116:	8e bd       	out	0x2e, r24	; 46
	//Do nothing while transmission is going on
	while(!(SPSR & (1<<SPIF)));			
 118:	0d b4       	in	r0, 0x2d	; 45
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <SPIxchng+0x2>

	return(return_data);
}
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

00000122 <sendStartFrame>:
    }
}

void sendStartFrame(void) {	
	for(uint8_t i = 0; i < 4; i++) {
		SPIxchng(0);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 13a:	08 95       	ret

0000013c <sendStopFrame>:
	}
}

void sendStopFrame(void) {
	for(uint8_t i = 0; i < 4; i++) {
		SPIxchng(0xFF);
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
 154:	08 95       	ret

00000156 <sendLedColorFrame>:
	}
}

void sendLedColorFrame(uint8_t red, uint8_t green, uint8_t blue) {
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c8 2f       	mov	r28, r24
 15e:	d6 2f       	mov	r29, r22
 160:	14 2f       	mov	r17, r20
	SPIxchng(BRIGHTNESS);
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
	SPIxchng(blue);
 16a:	81 2f       	mov	r24, r17
 16c:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
	SPIxchng(green);
 170:	8d 2f       	mov	r24, r29
 172:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
	SPIxchng(red);
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <sendLedSelectFrame>:

void sendLedSelectFrame(uint32_t ledNumber) {
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	00 d0       	rcall	.+0      	; 0x192 <sendLedSelectFrame+0xe>
 192:	00 d0       	rcall	.+0      	; 0x194 <sendLedSelectFrame+0x10>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	uint8_t selectFrame[4];
	
	selectFrame[0] = (ledNumber >> 24) & 0xFF;
 198:	99 83       	std	Y+1, r25	; 0x01
	selectFrame[1] = (ledNumber >> 16) & 0xFF;
 19a:	8a 83       	std	Y+2, r24	; 0x02
	selectFrame[2] = (ledNumber >> 8) & 0xFF;
 19c:	7b 83       	std	Y+3, r23	; 0x03
	selectFrame[3] = ledNumber & 0xFF;
 19e:	6c 83       	std	Y+4, r22	; 0x04
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	7e 01       	movw	r14, r28
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	e8 0e       	add	r14, r24
 1ac:	f1 1c       	adc	r15, r1
	
	for(uint8_t i = 0; i < 4; i++) {
		SPIxchng(selectFrame[i]);
 1ae:	f8 01       	movw	r30, r16
 1b0:	81 91       	ld	r24, Z+
 1b2:	8f 01       	movw	r16, r30
 1b4:	0e 94 8b 00 	call	0x116	; 0x116 <SPIxchng>
	selectFrame[0] = (ledNumber >> 24) & 0xFF;
	selectFrame[1] = (ledNumber >> 16) & 0xFF;
	selectFrame[2] = (ledNumber >> 8) & 0xFF;
	selectFrame[3] = ledNumber & 0xFF;
	
	for(uint8_t i = 0; i < 4; i++) {
 1b8:	0e 15       	cp	r16, r14
 1ba:	1f 05       	cpc	r17, r15
 1bc:	c1 f7       	brne	.-16     	; 0x1ae <sendLedSelectFrame+0x2a>
		SPIxchng(selectFrame[i]);
	}
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	08 95       	ret

000001d4 <setLED>:

void setLED(uint32_t ledNumber, uint8_t red, uint8_t green, uint8_t blue) {
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
 1e6:	c4 2f       	mov	r28, r20
 1e8:	d2 2f       	mov	r29, r18
	SPI_START();	
 1ea:	2a 98       	cbi	0x05, 2	; 5
	sendStartFrame();
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <sendStartFrame>
	sendLedColorFrame(red, green, blue);
 1f0:	40 2f       	mov	r20, r16
 1f2:	6d 2f       	mov	r22, r29
 1f4:	8c 2f       	mov	r24, r28
 1f6:	0e 94 ab 00 	call	0x156	; 0x156 <sendLedColorFrame>
	sendLedSelectFrame(ledNumber);
 1fa:	c7 01       	movw	r24, r14
 1fc:	b6 01       	movw	r22, r12
 1fe:	0e 94 c2 00 	call	0x184	; 0x184 <sendLedSelectFrame>
	sendStopFrame();	
 202:	0e 94 9e 00 	call	0x13c	; 0x13c <sendStopFrame>
	SPI_END();
 206:	2a 9a       	sbi	0x05, 2	; 5
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	08 95       	ret

00000218 <main>:
void sendLedSelectFrame(uint32_t);
void setLED(uint32_t, uint8_t, uint8_t, uint8_t);

int main(void) {
	
	SPIinit();
 218:	0e 94 7e 00 	call	0xfc	; 0xfc <SPIinit>
	UARTinit();
 21c:	0e 94 66 00 	call	0xcc	; 0xcc <UARTinit>
	
    while(1) {
		
		///Loops to display demo white chase sequence
        for(int i = 0; i < LEDS; i++) {
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
 224:	0f 2e       	mov	r0, r31
 226:	f0 e9       	ldi	r31, 0x90	; 144
 228:	bf 2e       	mov	r11, r31
 22a:	f0 2d       	mov	r31, r0
 22c:	10 e0       	ldi	r17, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	91 2c       	mov	r9, r1
 234:	a1 2c       	mov	r10, r1
 236:	19 c0       	rjmp	.+50     	; 0x26a <main+0x52>
			setLED(i,100,100,100);
 238:	b7 01       	movw	r22, r14
 23a:	88 27       	eor	r24, r24
 23c:	77 fd       	sbrc	r23, 7
 23e:	80 95       	com	r24
 240:	98 2f       	mov	r25, r24
 242:	04 e6       	ldi	r16, 0x64	; 100
 244:	24 e6       	ldi	r18, 0x64	; 100
 246:	44 e6       	ldi	r20, 0x64	; 100
 248:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	80 e7       	ldi	r24, 0x70	; 112
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x3a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x44>
 25c:	00 00       	nop
	UARTinit();
	
    while(1) {
		
		///Loops to display demo white chase sequence
        for(int i = 0; i < LEDS; i++) {
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	e2 1a       	sub	r14, r18
 262:	f2 0a       	sbc	r15, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x52>
 266:	e9 2c       	mov	r14, r9
 268:	fa 2c       	mov	r15, r10
 26a:	80 e9       	ldi	r24, 0x90	; 144
 26c:	e8 16       	cp	r14, r24
 26e:	f1 04       	cpc	r15, r1
 270:	1c f3       	brlt	.-58     	; 0x238 <main+0x20>
 272:	cb 2c       	mov	r12, r11
 274:	d1 2e       	mov	r13, r17
 276:	ed 2e       	mov	r14, r29
 278:	fc 2e       	mov	r15, r28
			setLED(i,100,100,100);
			_delay_ms(50);
		}
		for(int i = LEDS; i > 0; i--) {
			setLED(i,100,100,100);
 27a:	04 e6       	ldi	r16, 0x64	; 100
 27c:	24 e6       	ldi	r18, 0x64	; 100
 27e:	44 e6       	ldi	r20, 0x64	; 100
 280:	c7 01       	movw	r24, r14
 282:	b6 01       	movw	r22, r12
 284:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setLED>
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	20 e7       	ldi	r18, 0x70	; 112
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	91 50       	subi	r25, 0x01	; 1
 290:	20 40       	sbci	r18, 0x00	; 0
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x76>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x80>
 298:	00 00       	nop
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	c9 1a       	sub	r12, r25
 29e:	d1 08       	sbc	r13, r1
 2a0:	e1 08       	sbc	r14, r1
 2a2:	f1 08       	sbc	r15, r1
		///Loops to display demo white chase sequence
        for(int i = 0; i < LEDS; i++) {
			setLED(i,100,100,100);
			_delay_ms(50);
		}
		for(int i = LEDS; i > 0; i--) {
 2a4:	c1 14       	cp	r12, r1
 2a6:	d1 04       	cpc	r13, r1
 2a8:	e1 04       	cpc	r14, r1
 2aa:	f1 04       	cpc	r15, r1
 2ac:	31 f7       	brne	.-52     	; 0x27a <main+0x62>
 2ae:	db cf       	rjmp	.-74     	; 0x266 <main+0x4e>

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
