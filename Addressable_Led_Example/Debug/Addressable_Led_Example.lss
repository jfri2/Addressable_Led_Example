
Addressable_Led_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000124  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000294  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a8  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000173  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f6  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UARTPutChar>:


// the following function sends a single character out of the serial port
static int UARTPutChar(char ch, FILE *stream) {

    while ( (UCSR0A & (1 << UDRE0)) == 0 )		// wait until there is room in the transmit buffer
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <UARTPutChar+0x4>
	{
	}

    UDR0 = ch;									// load the character into the UART data register
  b0:	80 93 c6 00 	sts	0x00C6, r24

    return 0;
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <UARTGetChar>:

// the following function waits for a serial character to be received
static int UARTGetChar(FILE *stream) {
   unsigned char ch;   							// create a variable to hold the received value
   
   while ( (UCSR0A & (1<<RXC0)) == 0 )			// wait until the received character flag is set
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <UARTGetChar+0x4>
   {
   }
   
   ch=UDR0;  									// load the received character into the local variable
  c4:	80 91 c6 00 	lds	r24, 0x00C6

   return ch;									// return the value
}
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <UARTinit>:
static FILE mystdout = FDEV_SETUP_STREAM(UARTPutChar, UARTGetChar, _FDEV_SETUP_RW);	/* Assign I/O stream to UART */


void UARTinit(void) {

	UCSR0A = 0x00;			
  cc:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x18;			// enable UART TX and RX
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;			// set the UART for N, 8, 1
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 8;				// set BAUD Rate for 115200 with 16MHz clock
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
  e2:	10 92 c5 00 	sts	0x00C5, r1

	stdout = &mystdout;		// define the output stream
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	90 93 11 01 	sts	0x0111, r25
  ee:	80 93 10 01 	sts	0x0110, r24
	stdin = &mystdout;		// define the input stream	
  f2:	90 93 0f 01 	sts	0x010F, r25
  f6:	80 93 0e 01 	sts	0x010E, r24
  fa:	08 95       	ret

000000fc <SPIinit>:
#define SPI_START();	CSPORT &= ~(1<<CS);
#define SPI_END();		CSPORT |= (1<<CS);


void SPIinit() {
	SPIDDR |= (1<<MOSI) | (1<<SCK);				//sets MOSI and SCK pins as outputs
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	88 62       	ori	r24, 0x28	; 40
 100:	84 b9       	out	0x04, r24	; 4
	SPIDDR &= ~(1<<MISO);						//sets MISO to input
 102:	24 98       	cbi	0x04, 4	; 4
	SPIPORT |= ((1<<SCK) | (1<<MOSI));			//enables pullups on SCK and MOSI pins
 104:	85 b1       	in	r24, 0x05	; 5
 106:	88 62       	ori	r24, 0x28	; 40
 108:	85 b9       	out	0x05, r24	; 5
	SPIPORT &= ~(1<<MISO);						//disables pullup resistors on MISO
 10a:	2c 98       	cbi	0x05, 4	; 5
	CSDDR |= (1<<CS);							//sets CS pin to output
 10c:	22 9a       	sbi	0x04, 2	; 4
	CSPORT |= (1<<CS);							//enables pullups on CS pin
 10e:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1);	//set SPCR regiseter to enable spi, master, prescalar = clk/16
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	8c bd       	out	0x2c, r24	; 44
 114:	08 95       	ret

00000116 <main>:
#include "serial.c"
#include "spi.h"

int main(void)
{
	SPIinit();
 116:	0e 94 7e 00 	call	0xfc	; 0xfc <SPIinit>
	UARTinit();
 11a:	0e 94 66 00 	call	0xcc	; 0xcc <UARTinit>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x8>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
